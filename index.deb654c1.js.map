{"mappings":"AAqBO,SAASA,EAAgBC,GAC5B,MAIMC,EAAO,IAAIC,gBAAgB,CAC7BC,QAHW,wEAIXC,UAAUJ,IAGlB,OAAOK,MAAM,8CAA2BJ,KAAUK,MAAMC,IACpD,IAAKA,EAASC,GACd,MAAM,IAAIC,MAAM,kBAEhB,OAAOF,EAASG,MAAM,G,CCnCnB,SAASC,EAAaC,GACzB,MAAMC,IAACA,GAAOD,EAAK,IACdE,KAACA,EAAIC,YAAEA,EAAWC,YAAEA,GAAaJ,EAAK,GAAGK,OAAO,GAEzD,MAAO,qCACKJ,WAAaC,oEAEfA,kBACDC,gEAC+CC,uB,CCJxD,MAAME,EAAO,CACTC,YAAaC,SAASC,cAAc,iBACpCC,OAAQF,SAASC,cAAc,WAC/BE,MAAOH,SAASC,cAAc,UAC9BG,QAASJ,SAASC,cAAc,cAuCgL,SAA3MI,EAAaC,GAClBR,EAAKK,MAAMI,MAAMC,QAAS,OAC1BV,EAAKI,OAAOK,MAAMC,QAAS,QAC3BV,EAAKM,QAAQK,UAAW,GAGxB9B,EAFgB2B,EAAMI,OAAOC,OAGxBzB,MAAMM,IAEwEM,EAA1EM,QAAQK,UAAYlB,EAAaC,EAAK,IAG1CoB,OAAOC,IAERf,EAAKK,MAAMI,MAAMC,QAAS,QAC1BM,QAAQC,IAAIF,EAAI,IAEfG,SAAQ,KACLlB,EAAKI,OAAOK,MAAMC,QAAS,OAC3BV,EAAKM,QAAQG,MAAMC,QAAS,OAAO,G,CArD6CV,EAAvFC,YAAYQ,MAAMC,QAAS,OAChCV,EAAKM,QAAQG,MAAMC,QAAS,OAC5BV,EAAKI,OAAOK,MAAMC,QAAS,QAC3BV,EAAKK,MAAMI,MAAMC,QAAS,OFhBnB,WACH,MAIM3B,EAAO,IAAIC,gBAAgB,CAC7BC,QAHW,0EAMnB,OAAOE,MAAM,uCAA2BJ,KAAUK,MAAMC,IACpD,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAM,kBAEpB,OAAOF,EAASG,MAAM,G,CEQ8P,GACnRJ,MAAMW,IACHC,EAAKC,YAAYU,UAAYZ,EAAOoB,KAAKC,GAAQ,kBAAkBA,EAAMC,OAAOD,EAAMxB,kBACrF0B,KAAK,IAEmFtB,EAApFK,MAAMI,MAAMC,QAAS,OAGeV,EAApCC,YAAYsB,iBAAiB,SAAUhB,EAAa,IAG5DO,OAAOC,IAEiLf,EAApLK,MAAMI,MAAMC,QAAS,QAC1BM,QAAQC,IAAIF,EAAI,IAEfG,SAAQ,KACLlB,EAAKC,YAAYQ,MAAMC,QAAS,QAChCV,EAAKI,OAAOK,MAAMC,QAAS,MAAM","sources":["src/cat-api.js","src/markup.js","src/index.js"],"sourcesContent":["//Напиши функцію fetchBreeds(), яка виконує HTTP-запит і повертає проміс із масивом порід - результатом запиту. Винеси її у файл cat-api.js та зроби іменований експорт.\nexport function fetchBreeds() {\n    const BASE_URL  = \"https://api.thecatapi.com/v1\";\n    const ENDPOINT = \"breeds\"\n    const APY_KEY =\"live_KhQV1oKIS4BCvrcPDeozPUb3E9SMkjS0ykizMr5iBCwxr7OS8E0iDtuzHjzD1OGJ\"\n\n    const params=new URLSearchParams({\n        api_key:APY_KEY,\n    })\n\nreturn fetch(`${BASE_URL}/${ENDPOINT}?${params}`).then((response)=>{\n    if (!response.ok) {\n        throw new Errow(\"404 not found!\");\n    } \n    return response.json(); \n    })\n\n}\n\n\n//Напиши функцію fetchCatByBreed(breedId), яка очікує ідентифікатор породи, робить HTTP-запит і повертає проміс із даними про кота - результатом запиту. Винеси її у файл cat-api.js і зроби іменований експорт.\nexport function fetchCatByBreed(breedId) {\n    const BASE_URL  = \"https://api.thecatapi.com/v1\";\n    const ENDPOINT = \"images/search\"\n    const APY_KEY =\"live_KhQV1oKIS4BCvrcPDeozPUb3E9SMkjS0ykizMr5iBCwxr7OS8E0iDtuzHjzD1OGJ\"\n\n    const params=new URLSearchParams({\n        api_key:APY_KEY,\n        breed_ids:breedId,\n    })\n\nreturn fetch(`${BASE_URL}/${ENDPOINT}?${params}`).then((response)=>{\n    if (!response.ok) {\n    throw new Errow(\"404 not found!\");\n    } \n    return response.json(); \n})\n}\n\n\n","export function createMarkup(data) {\n    const {url} = data[0]; //деструктуризуємо властивість url  обєкта в масиві breeds. Масив містять лише 1 обєкт без імені, тому до нього звертаємося під індексом 0. \n    const{name, description, temperament}=data[0].breeds[0]; //деструктуризуємо властивості обєкта в масиві breeds, який у свою чергу знаходиться в масиві data. Обидва масиви містять лише по одному обєкту, тому до них звертаємося під індексом [0].\n\nreturn `<div class=\"cat-card\">\n<img src=\"${url}\" alt=\"${name} width=\"600\" height=\"400>\n<div class=\"cat-card-info\">\n    <h1>${name}</h1>\n    <p>${description}</p>\n    <p><span class=\"temperament\">Temperament: </span> ${temperament}</p>\n</div>\n</div>` \n}     ","//................HTTP-запити...........................................\n\nimport { fetchBreeds, fetchCatByBreed } from \"./cat-api.js\";\nimport { createMarkup } from \"./markup.js\"\n\nconst refs = {\n    breedSelect: document.querySelector(\".breed-select\"),\n    loader: document.querySelector(\".loader\"),\n    error: document.querySelector(\".error\"),\n    catInfo: document.querySelector(\".cat-info\"),\n}\n\n\n//Поки відбувається будь-який HTTP-запит, необхідно показувати завантажувач - елемент p.loader. А всі інші елементи приховати:\nrefs.breedSelect.style.display= \"none\";\nrefs.catInfo.style.display= \"none\";\nrefs.loader.style.display= \"block\";\nrefs.error.style.display= \"none\";\n\n\n\n//Під час завантаження сторінки має виконуватися HTTP-запит за колекцією порід - тобто буде викликатися функція fetchBreeds. Під час обробки її результату (масиву breeds), ми map-ємо цей масив (з кожного обєкту масиву  витягуємо необхідні властивості (id, name) і наповнюємо (за доп.innerHTML) ними опції breedSelect так, щоб value опції містило id породи, а в інтерфейсі користувачеві відображалася назва породи:\nfetchBreeds()\n    .then((breeds)=>{\n        refs.breedSelect.innerHTML = breeds.map((breed)=>`<option value=\"${breed.id}\">${breed.name}</option>`)\n        .join(\"\")\n        //При повторній перезагрузці сторінки після помилки, якщо перед цим вже була загружена сторінка з помилкою\n        refs.error.style.display= \"none\";\n\n        //Після того як ми наповнили breedSelect, додаємо слухача  події change \n        refs.breedSelect.addEventListener(\"change\", handleSelect);\n    })\n\n    .catch((err)=>{\n    //Якщо у користувача сталася помилка під час будь-якого HTTP-запиту, наприклад, впала мережа, була втрата пакетів тощо, тобто проміс було відхилено, необхідно відобразити елемент p.error, а при кожному наступному запиті приховувати його. \n    refs.error.style.display= \"block\";\n    console.log(err);\n    })\n    .finally(()=>{\n        refs.breedSelect.style.display= \"block\";\n        refs.loader.style.display= \"none\";\n        \n    }\n    );\n\n\n    \n//Оголошення функції для слухача події \"change\" на breedSelect. Коли користувач обирає якусь опцію в селекті, необхідно виконувати запит за повною інформацією про кота,  тобто при події change в викливається функція fetchCatByBreed, якій для параметра рядка запиту breed_ids передається ідентифікатор породи breedId.\nfunction handleSelect(event) {\n    refs.error.style.display= \"none\";\n    refs.loader.style.display= \"block\";\n    refs.catInfo.innerHTML= \"\"; //очищаємо картку,щоб поки буде робитися новий запит, старої картки вже не було на екрані\n    const breedId = event.target.value; //ідентифікатор породи беремо з вибраної опції селекту breedSelect, на якому висить слухач події (у опцій value=breed.id).\n    \n    fetchCatByBreed(breedId)\n        .then((data)=>{\n        //Результат (data) виклику фунції fetchCatByBreed під час обробки записуємо в catInfo (зробивши розмітку за допомогою функції createMarkup)\n        refs.catInfo.innerHTML = createMarkup(data);\n        })\n\n        .catch((err)=>{\n        //Якщо у користувача сталася помилка під час будь-якого HTTP-запиту, наприклад, впала мережа, була втрата пакетів тощо, тобто проміс було відхилено, необхідно відобразити елемент p.error, а при кожному наступному запиті приховувати його. \n        refs.error.style.display= \"block\";\n        console.log(err);\n        })\n        .finally(()=>{\n            refs.loader.style.display= \"none\";\n            refs.catInfo.style.display= \"block\";           \n        })\n}\n\n\n\n"],"names":["$6b5f202d1456c0af$export$57b7d3a597416aa2","breedId","params","URLSearchParams","api_key","breed_ids","fetch","then","response","ok","Errow","json","$88074c8a2c2a5e3d$export$24783e9f3a24abe4","data","url","name","description","temperament","breeds","$1f0dc3b9307be026$var$refs","breedSelect","document","querySelector","loader","error","catInfo","$1f0dc3b9307be026$var$handleSelect","event","style","display","innerHTML","target","value","catch","err","console","log","finally","map","breed","id","join","addEventListener"],"version":3,"file":"index.deb654c1.js.map"}